#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

/**
 * getlen - get length of string.
 * @s: string pointer
 * Return: length
 */
int getlen(char *s)
{
	int l = 0;
	char *s11 = s;

	for (; *s11; s11++, l++)
		;
	return (l);
}

/**
 * type_prompt - type ($) prompt
 *
 * Return: nothing
 */
void type_prompt()
{
	static int first_time = 1;
	const char *CLEAR_SCREEN_ANSI;

	if (first_time)
	{
	  CLEAR_SCREEN_ANSI = "\033[2J\033[1;1H";
          write(STDOUT_FILENO, CLEAR_SCREEN_ANSI, 10);
          first_time = 0;
        }
        write(STDOUT_FILENO, "($) ", 4);
}
/**
 * sigintHandler - prevent Ctrl-C from killing the shell
 * signum - signal number
 *
 * Return: nothing
 */
void sigintHandler(int signum)
{
	signal(signum, SIG_IGN);
	write(STDOUT_FILENO, "\n", 1);
	type_prompt();
	signal(SIGINT, sigintHandler);
}
/**
 * main - getline/read and strtok/parse a line into array
 *
 * return: int
 */

extern char **environ;

int main(void)
{
	FILE *fp;
	char *line = NULL, *token, *toktmp = NULL;
	size_t len = 0;
	int toklen = 0, i = 0, rows = 0, k = 0;
	ssize_t read;
	char **arr;
	pid_t child_pid;
	int status;
	char *argv[] = {"/bin/ls", "-l", "/usr/", NULL};
	/* sighandler_t sigintHandle; */
	(void) argv;
	(void) toktmp;

	/* fp = STDIN_FILENO; */
	fp = stdin;

	/* printf("%lu\n", *environ); */

	/* while ((read = getline(&line, &len, fp)) != -1) */
	while (1)
	{
		type_prompt();
		signal(SIGINT, sigintHandler);

		if ((read = getline(&line, &len, fp)) == -1)
		{
			break;
		}
		else
		{
			i = 0;
			rows = 0;
			if (strcmp(line, "exit\n") == 0)
			{
				free(line);
				exit(EXIT_SUCCESS);
			}
			token = strtok(line, " \n");
			if (!token)
			{
				continue;
			}
			arr = malloc((read) * sizeof(char) + 1);
			if (arr == NULL)
			{
				free(line);
				return (-1);
			}
			toklen = getlen(token);
			arr[i] = malloc((toklen) * sizeof(char));
			if (arr[i] == NULL)
			{
				free(arr);
				free(line);
				return (-1);
			}
			arr[i] = token;
			rows++;

			while ((token = strtok(NULL, " \n")))
			{
				i++;
				toklen = getlen(token);
				arr[i] = malloc((toklen) * sizeof(char));
				if (arr[i] == NULL)
				{
					for (k = 0; k < i - 1; k++)
						free(arr[k]);
					free(arr);
					free(line);
					return (-1);
				}
				arr[i] = token;
				rows++;
			}
			arr[i + 1] = NULL;
			rows++;

			printf("End of creating array %s\n", arr[0]);

			child_pid = fork();
			if (child_pid == -1)
			{
					perror("Error:");
					free(line);
					for (k = 0; k < i - 1; k++)
						free(arr[k]);
					free(arr);
					return (-1);
			}
			if (child_pid == 0)
			{
				printf("(1) child getpid %d, child pid %d, status %d, parent ppid %d\n", getpid(), child_pid, WEXITSTATUS(status), getppid());
				if (execve(arr[0], arr, environ) == -1)
				{
					/* i = 0; */
					/* while (arr[i]) */
					/*   free(arr[i]); */
					/* free(arr); */
					printf("I failed. arr[0] %s\n", arr[0]);
					perror("Error:");
					printf("(1) child getpid %d, child pid %d, status %d, parent ppid %d\n", getpid(), child_pid, WEXITSTATUS(status), getppid());
				}
			}
			else
			{
				printf("(3) child pid %d, status %d, parent pid %d, parent getppid %d\n", child_pid, WEXITSTATUS(status), getpid(), getppid());
				wait(&status);
				printf("(4) child pid %d, status %d, parent pid %d, parent getppid %d\n", child_pid, WEXITSTATUS(status), getpid(), getppid());
			}

		}
	}
		/* write(STDIN_FILENO, "\n", 1); */
		free(line);
		/* free(token); */
		/* for (i = 0; i < rows; i++) */
		/* 	free(arr[i]); */
		/* free(arr); */
		exit(EXIT_SUCCESS);
}
